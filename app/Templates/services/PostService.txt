<?php

namespace App\Services;

use App\Repositories\{$class}Repository;
use App\Repositories\RouterRepository;
use App\Services\Interfaces\{$class}ServiceInterface;
use Exception;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

/**
 * Class {$class}CatalogueService
 * @package App\Services
 */
class {$class}Service extends BaseService implements {$class}ServiceInterface
{
    protected ${$module}Repository;
    protected $controllerName = '{$class}Controller';

    public function __construct({$class}Repository ${$module}Repository, RouterRepository $routerRepository)
    {
        $this->{$module}Repository = ${$module}Repository;
        parent::__construct($routerRepository);
    }

    public function paginate($request, $languageId)
    {
        $perPage = $request->input('perpage') != null ? $request->integer('perpage') : 20;
        $condition = [
            'keyword' => addslashes($request->input('keyword')),
            'publish' => $request->input('publish') != null ? $request->integer('publish') : -1,
            '{$module}_catalogue_id' => $request->input('{$module}_catalogue_id') != null ? $request->integer('{$module}_catalogue_id') : 0,
            'where' => [
                ['{$module}_language.language_id', '=', $languageId]
            ]
        ];
        $join = [
            ['{$module}_language', '{$module}_language.{$module}_id', '=', '{$module}s.id'],
            ['{$module}_catalogue_{$module}', '{$module}_catalogue_{$module}.{$module}_id', '=', '{$module}s.id']
        ];
        $orderBy = [
            '{$module}s.id', 'DESC'
        ];
        $extend = [
            'path' => '{$module}/index',
            'groupBy' => $this->paginateSelect()
        ];
        $relations = ['{$module}_catalogues'];
        return $this->{$module}Repository->pagination($this->paginateSelect(), $condition, $join, $perPage, $extend, $relations, $orderBy, $this->whereRaw($request, $languageId));
    }

    public function create($request, $languageId)
    {
        DB::beginTransaction();
        try {
            ${$module} = $this->create{$class}($request);
            if (${$module}->id > 0) {
                $this->updateLanguageFor{$class}(${$module}, $request, $languageId);
                $this->updateCatalogueFor{$class}(${$module}, $request);
                $this->createRouter(${$module}, $request, $this->controllerName, $languageId);
            }

            DB::commit();
            return true;
        } catch (Exception $e) {
            DB::rollBack();
            return false;
        }
    }

    public function update($id, $request, $languageId)
    {
        DB::beginTransaction();
        try {
            ${$module} = $this->{$module}Repository->findById($id);
            if ($this->update{$class}(${$module}, $request)) {
                $this->updateLanguageFor{$class}(${$module}, $request, $languageId);
                $this->updateCatalogueFor{$class}(${$module}, $request);
                $this->updateRouter(${$module}, $request, $this->controllerName, $languageId);
            }
            DB::commit();
            return true;
        } catch (Exception $e) {
            DB::rollBack();
            return false;
        }
    }

    public function updateStatus($post = [])
    {
        DB::beginTransaction();
        try {
            $payload[$post['field']] = (($post['value'] == 1) ? 0 : 1);
            $this->{$module}Repository->update($post['modelId'], $payload);
            DB::commit();
            return true;
        } catch (Exception $e) {
            DB::rollBack();
            return false;
        }
    }

    public function updateStatusAll($post = [])
    {
        DB::beginTransaction();
        try {
            $payload[$post['field']] = $post['value'];
            $this->{$module}Repository->updateByWhereIn('id', $post['id'], $payload);
            DB::commit();
            return true;
        } catch (Exception $e) {
            DB::rollBack();
            return false;
        }
    }

    public function delete($id)
    {
        DB::beginTransaction();
        try {
            $this->{$module}Repository->delete($id);
            $this->routerRepository->forceDeleteByCondition([
                ['module_id', '=', $id],
                ['controllers', '=', 'App\Http\Controllers\Frontend\\' . $this->controllerName . '']
            ]);

            DB::commit();
            return true;
        } catch (Exception $e) {
            DB::rollBack();
            return false;
        }
    }

    private function create{$class}($request)
    {
        $payload = $request->only($this->payload());
        $payload['user_id'] = Auth::id();
        $payload['album'] = $this->formatAlbum($payload['album'] ?? null);
        return $this->{$module}Repository->create($payload);
    }

    private function update{$class}(${$module}, $request)
    {
        $payload = $request->only($this->payload());
        $payload['album'] = $this->formatAlbum($payload['album'] ?? null);
        return $this->{$module}Repository->update(${$module}->id, $payload);
    }

    private function updateLanguageFor{$class}(${$module}, $request, $languageId)
    {
        $payload = $request->only($this->payloadLanguage());
        $payload = $this->formatLanguagePayload($payload, ${$module}->id, $languageId);
        ${$module}->languages()->detach($payload['language_id']);
        return $this->{$module}Repository->createPivot(${$module}, $payload, 'languages');
    }

    private function formatLanguagePayload($payload, ${$module}Id, $languageId)
    {
        $payload['canonical'] = Str::slug($payload['canonical']);
        $payload['language_id'] = $languageId;
        $payload['{$module}_id'] = ${$module}Id;
        return $payload;
    }

    private function updateCatalogueFor{$class}(${$module}, $request)
    {
        $catalogue = $this->catalogue($request);
        ${$module}->{$module}_catalogues()->sync($catalogue);
    }

    private function catalogue($request)
    {
        return array_unique(array_merge(($request->input('catalogue') != null && is_array($request->input('catalogue'))) ? $request->input('catalogue') : [], [$request->{$module}_catalogue_id]));
    }

    private function whereRaw($request, $languageId)
    {
        $rawCondition = [];
        ${$module}CatalogueId = $request->input('{$module}_catalogue_id') != null ? $request->integer('{$module}_catalogue_id') : 0;
        if (${$module}CatalogueId > 0) {
            $rawCondition['whereRaw'] = [
                [
                    '{$module}_catalogue_{$module}.{$module}_catalogue_id IN (
                        SELECT id
                        FROM {$module}_catalogues
                        JOIN {$module}_catalogue_language ON {$module}_catalogues.id = {$module}_catalogue_language.{$module}_catalogue_id
                        WHERE lft >= (SELECT lft FROM {$module}_catalogues WHERE {$module}_catalogues.id = ?)
                        AND rgt <= (SELECT rgt FROM {$module}_catalogues WHERE {$module}_catalogues.id = ?)
                        AND {$module}_catalogue_language.language_id = ?
                    )',
                    [${$module}CatalogueId, ${$module}CatalogueId, $languageId]
                ]
            ];
        }
        return $rawCondition;
    }

    private function paginateSelect()
    {
        return [
            '{$module}s.id',
            '{$module}s.publish',
            '{$module}s.image',
            '{$module}s.order',
            '{$module}_language.name',
            '{$module}_language.canonical'
        ];
    }

    private function payload()
    {
        return ['follow', 'publish', 'image', 'album', '{$module}_catalogue_id', 'catalogue'];
    }

    private function payloadLanguage()
    {
        return ['name', 'description', 'content', 'meta_title', 'meta_keyword', 'meta_description', 'canonical'];
    }
}
